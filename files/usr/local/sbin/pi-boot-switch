#!/bin/bash
# ----------------------------------------------------------------------------
# Raspbian boot-switcher: manage Raspberry Pi multiboot system
#
# ----------------------------------------------------------------------------
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/pi-boot-switch
# ----------------------------------------------------------------------------

# some constants   ------------------------------------------------------------

BOOT_BACKUP="/_boot"
FS_TYPE="ext4"
REBOOT_DELAY="5"

# set defaults   --------------------------------------------------------------

setDefaults() {
  targetDevice=""
  targetDir=""
  rootDevice=""
  bootDevice=""
  verbose=""
  format=""
  isSD=""
  keepHome=""
  updateHome=""
  useUUID=0

  # operations
  info=""
  copy=""
  copyOther=""
  label=""
  description=""
  newBoot=""
  switch=""
  reboot=""
  install=""

  # environment
  if [ -f "/etc/armbian-release" ]; then
    bootFile="armbianEnv.txt"
    bootParm="rootdev"
  else
    bootFile="cmdline.txt"
    bootParm="root"
  fi
}

# --- help   -----------------------------------------------------------------

usage() {
  local pgm=`basename $0`
  echo -e "\n$pgm: manage Raspberry Pi multiboot system\n\
  \nusage: `basename $0` [options]\n\
  Possible options:\n\n\
    -I             show partition info

    -c             copy current partition (select target with -t)
    -t dest[=name] target partition/dir (required for -i or -c, e.g. '-t /dev/sdc')
    -C other       copy from another partition/dir (select target with -t)
    -S             target partition is on a SD-card, not an usb-device
    -F             format target partition
    -k             keep existing /home on target during copy (don't use -F)
    -U             use UUIDs instead of device-names

    -L label       set label of target partition (also available standalone)
    -D descr       set description of target partition (also available standalone)

    -B             copy /boot to partition dest and set dest as new /boot

    -s             switch to partition dest for next boot (requires reboot)
                   (select target with -t)
    -u             update /home on dest from current partition before switching
    -R             reboot immediately after switching

    -i image       install image to target partition

    -v             verbose operation
    -h             show this help
"
  exit 3
}

# --- parse arguments and set variables   ------------------------------------

parseArguments() {
  while getopts ":IcC:t:SFkUL:D:BsuRi:vh" opt; do
    case $opt in
      I) info=1;;
      c) copy=1;;
      C) copyOther=1; otherPartition="$OPTARG";;
      t) targetDevice="$OPTARG";;
      S) isSD=1;;
      F) format=1;;
      k) keepHome=1;;
      U) useUUID=1;;
      L) label=1; targetLabel="$OPTARG";;
      D) description="$OPTARG";;
      B) newBoot=1;;
      s) switch=1;;
      u) updateHome=1;;
      R) reboot=1;;
      i) install=1; srcImage="$OPTARG";;
      v) verbose="-v";;
      h) usage;;
      ?) echo "error: illegal option: $OPTARG"
           usage;;
    esac
  done

  shift $((OPTIND-1))
  dirs=("$@")
}

# --- check arguments   ------------------------------------------------------

checkArguments() {
  if [ -n "$targetDevice" ]; then

    # rename feature: extract name of target-device for use in fstab + cmdline.txt
    if grep -q '=' <<< "$targetDevice"; then
      IFS== read targetDevice targetDeviceName <<< "$targetDevice"
      [ "${targetDeviceName:0:4}" != "/dev" ] && \
                                   targetDeviceName="/dev/$targetDeviceName"
    elif [ ! -d "$targetDevice" ]; then
      targetDeviceName="$targetDevice"
    fi

    if [ -d "$targetDevice" ]; then
      # targetDevice is actually a directory
      targetDir="$targetDevice"
      if [ $(find "$targetDir" | grep -v "lost+found" | wc -l) -gt 1 ]; then
        if [ -z "$format" ]; then
          msg "error: directory $targetDir is not empty!"
          exit 3
        fi
      fi
      if [ -z "$copy" -a -z "$copyOther" ]; then
        msg "error: a directory-target requires options -c or -C!"
        exit 3
      fi
      if [ "$useUUID" -eq 1 ]; then
        msg "error: option -U not supported for directory-targets!"
        exit 3
      fi
      if [ -n "$isSD" ]; then
        msg "error: option -S not supported for directory-targets!"
        exit 3
      fi
      # disable unsupported options
      label=""
      switch=""
      description=""
      newBoot=""
      reboot=""
    else
      [ "${targetDevice:0:4}" != "/dev" ] && targetDevice="/dev/$targetDevice"
      if [ ! -b "$targetDevice" ]; then
        msg "error: $targetDevice does not exist!"
        exit 3
      fi
    fi

    if [ -n "$isSD" -a -z "$targetDeviceName" ]; then
      targetDeviceName="${targetDevice/sd?/mmcblk0p}"
    fi
  fi

  if [ -n "$copyOther" ]; then
    if [ -n "$copy" ]; then
      msg "error: options -c and -C are mutually exclusive!"
      exit 3
    elif [ -z "$otherPartition" ]; then
      msg "error: missing argument for option -C !"
      exit 3
    elif [ -d "$otherPartition" ]; then
        if [ ! -d "$otherPartition/_boot" ]; then
          msg "error: directory $otherPartition invalid source!"
          exit 3
        fi
        srcDir="$otherPartition"
    elif [ ! -b "$otherPartition" ]; then
      msg "error: $otherPartition is not a valid device!"
      exit 3
    fi
  fi
}

# --- write message to log and stderr   --------------------------------------

msg() {
  echo -e "$1" >&2
}

# --- copy files of root-partition   -----------------------------------------

copyRoot() {
  local src="$1" dst="$2"
  msg "info: copying $src to $dst"
  rsync $verbose -a -H -A -X -S -x --delete \
                 --exclude=/tmp/\*\* \
                 --exclude=/var/tmp/\*\* \
                 ${keepHome:+"--exclude=/home"} \
                 "$src" "$dst"
  # rsync destroys swap-files, so copy explicitly
  [ -f "$src/var/swap" ] && cp -a "$src/var/swap" "$dst/var/swap"
  sync
}

# --- copy files of boot-partition   -----------------------------------------

copyBoot() {
  local src="$1" dst="$2"
  [ ! -d "$dst" ] && mkdir "$dst"
  msg "info: copying $src to $dst"
  rsync $verbose -a --delete --inplace --no-owner --no-group --modify-window=2 \
          --exclude="pi-boot-switch.txt" --filter="P pi-boot-switch.txt" \
            "$src" "$dst"
  sync
}

# --- query current root/boot device   ---------------------------------------

getCurrentDevice() {
  if [ "$1" = "UUID" ]; then
    findmnt -no UUID "$2"
  else
    findmnt -no SOURCE "$2"
  fi
}

# --- query next root device   -----------------------------------------------

getNextRootDevice() {
  local nextRoot=$(sed -ne "s/.*${bootParm}=\([^ ]*\) \?.*\$/\1/p" \
                                                            "/boot/$bootFile")
  if grep -qi UUID <<< "$nextRoot"; then
    nextRoot=$(blkid -l -o export -t "$nextRoot" | \
                                             sed -ne "/DEVNAME/s/DEVNAME=//p")
  fi
  echo "$nextRoot"
}

# --- update fstab after copy   ----------------------------------------------

updateFstab() {
  local part="$1" fstabPath="$2"
  msg "info: fixing / in /etc/fstab on $part"
  sed -i -e "/\W\/\W/s,^[^ \t]*,$part," "$fstabPath"

  msg "info: fixing /boot in /etc/fstab on $part"
  local currentBootDevice
  if [ $useUUID -eq 1 ]; then
    currentBootDevice="UUID=$(getCurrentDevice UUID /boot)"
  else
    currentBootDevice=$(getCurrentDevice NAME /boot)
  fi
  sed -i -e "/\W\/boot\W/s,^[^ \t]*,$currentBootDevice," "$fstabPath"
}

# --- update cmdline.txt after copy   ----------------------------------------

updateCmdline() {
  local part="$1" cmdlinePath="$2"
  msg "info: fixing $cmdlinePath"
  sed -i -e "s,${bootParm}=[^ ]*,${bootParm}=$part," "$cmdlinePath"
}

# --- get default label   ----------------------------------------------------

getLabel() {
  local ID VERSION_ID
  eval $(grep "^ID=\|^VERSION_ID=" "$1/etc/os-release")
  targetLabel="$ID $VERSION_ID"
}

# --- show partition information   -------------------------------------------

doInfo() {
  grep -qw "/boot" /etc/mtab || mount /boot
  declare -A role

  # fetch current roles of partitions
  local currentRoot=$(getCurrentDevice NAME /)
  local currentBoot=$(getCurrentDevice NAME /boot)
  local nextRoot=$(getNextRootDevice)

  role[$currentRoot]="curr root"
  if [ -n "${role[$nextRoot]}" ]; then
    role[$nextRoot]="curr/next root"
  else
    role[$nextRoot]="next root"
  fi
  role[$currentBoot]="curr boot"

  readDescription

  # check all partitions and print label, role and description

  echo "Partition       | Label            | Role           | Description"
  echo "----------------|------------------|----------------|---------------"

  local part label rest
  ( while read part rest; do
    if grep -qw LABEL <<< "$rest"; then
      label=$(sed -e 's/.*LABEL="\([^"]*\)".*/\1/' <<< "$rest")
    else
      label=""
    fi
    part="${part%:}"
    printf "%-15s | %-16s | %-14s | %-s\n" "$part" "$label" "${role[$part]}" "${partDescription[$part]}"
  done < <( blkid | grep PARTUUID)
  ) | sort --version-sort
}

# --- read labels   ----------------------------------------------------------

readLabels() {
  declare -A -g  partLabels
  local part label rest
  while read part rest; do
    if grep -qw LABEL <<< "$rest"; then
      label=$(sed -e 's/.*LABEL="\([^"]*\)".*/\1/' <<< "$rest")
    else
      label=""
    fi
    partLabels["${part%:}"]="$label"
  done < <( blkid | grep PARTUUID)
}

# --- label current/target partition   ---------------------------------------

doLabel() {
  [ -z "$targetLabel" ] && return
  local device
  if [ -n "$targetDevice" ]; then
    device="$targetDevice"
  else
    device=$(getCurrentDevice NAME /)
  fi

  # query filesystem type
  local fstype=$(lsblk -nlo FSTYPE "$device" 2>/dev/null)

  if [ -z "$fstype" ]; then
    msg "error: $device has no filesystem"
    return
  fi

  msg "info: setting label for $device: $targetLabel"
  if [[ "${fstype,,}" =~ ext.* ]]; then
    e2label "$device" "$targetLabel"
  elif [ "${fstype,,}" = "vfat" ]; then
    if type -p fatlabel > /dev/null; then
      fatlabel "$device" "$targetLabel"
    else
      msg "warning: could not label $device - please install fatlabel"
    fi
  else
    msg "warning: could not label $device - unsupported filesystem type"
  fi
}

# --- add description for current/target partition   -------------------------

doDescription() {
  local device
  if [ -n "$targetDevice" ]; then
    device="$targetDevice"
    # keep copy of description in _boot/pi-boot-switch.txt.self
    local mntDirTarget=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
    msg "info: mounting $targetDevice on $mntDirTarget"
    if mount "$targetDevice" "$mntDirTarget"; then
      mkdir -p "$mntDirTarget/_boot"
      echo "$description" > "$mntDirTarget/_boot/pi-boot-switch.txt.self"
      msg "info: umounting $targetDevice"
      umount "$mntDirTarget" && rm -fr "$mntDirTarget"
    fi
  else
    device=$(getCurrentDevice NAME /)
    mkdir -p "/_boot"
    echo "$description" > "/_boot/pi-boot-switch.txt.self"
    echo "$description" > "/boot/pi-boot-switch.txt.self"
  fi

  # read current description
  readDescription
  partDescription["$device"]="$description"
  writeDescription
}

# --- read partition descriptions   ------------------------------------------

readDescription() {
  declare -A -g  partDescription
  if [ ! -f "/boot/pi-boot-switch.txt" ]; then
    msg "info: no partition descriptions available"
    return
  fi

  msg "info: reading partition descriptions from /boot/pi-boot-switch.txt"
  local part desc
  while read part desc; do
    partDescription["${part/:}"]="$desc"
  done < /boot/pi-boot-switch.txt
}

# --- write partition descriptions   ------------------------------------------

writeDescription() {
  declare -A -g  partDescription

  msg "info: writing partition descriptions to /boot/pi-boot-switch.txt"
  local key
  for key in "${!partDescription[@]}"; do
    echo "$key: ${partDescription[$key]}"
  done > /boot/pi-boot-switch.txt
}

# --- fix /etc/fstab on all root-devices   -----------------------------------

fixAllFstab() {
  # replace bootDevice (devname) with uuid if necessary
  if [ $useUUID -eq 1 ]; then
    local uuid=$(lsblk -nlo UUID "$bootDevice")
    local bootDevice="UUID=$uuid"
  fi
  # fix current root partition
  msg "info: fixing /boot in /etc/fstab on current root-partition $part"
  sed -i -e "/\W\/boot\W/s,^[^ \t]*,$bootDevice," "/etc/fstab"

  # create temporary mountpoint
  local tmpMnt=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`

  # we only take partitions with label into account and skip the current root
  local part rest currentRoot=$(getCurrentDevice NAME /)
  while read part rest; do
    part="${part%:}"
    [ "$part" = "$currentRoot" ] && continue

    msg "info: testing $part ..."
    if ! mount "$part" "$tmpMnt"; then
      msg "info: could not mount $part: ignoring"
      continue
    fi
    if [ -d "$tmpMnt/_boot" ]; then
      msg "info: found _boot, fixing /boot in /etc/fstab on partition $part"
      sed -i -e "/\W\/boot\W/s,^[^ \t]*,$bootDevice," "$tmpMnt/etc/fstab"
    else
      msg "info: $part is not a relevant partition"
    fi
    umount "$tmpMnt"
  done < <( blkid -s LABEL)

  # cleamup temporary mountpoint
  mount | grep -qw "$tmpMnt" || rm -fr "$tmpMnt"
}

# --- create and configure new boot-partition   ------------------------------

doNewBoot() {
  local bootDevice="$targetDevice"
  if [ -z "$bootDevice" ]; then
    msg "error: no target boot device specified"
    exit 3
  elif [ ! -b "$bootDevice" ]; then
    msg "error: $bootDevice is no block device"
    exit 3
  fi

  # format partition
  if [ -n "$format" ]; then
    msg "info: formatting partition $bootDevice with Fat32"
    mkfs.fat $verbose -F 32 "$bootDevice"
  else
    msg "warning: not formatting $targetDevice!"
  fi

  # mount new boot partition
  local mntNewBoot=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
  msg "info: mounting $bootDevice on $mntNewBoot"
  if ! mount "$bootDevice" "$mntNewBoot"; then
    msg "error: could not mount $bootDevice, aborting!"
    rm -fr "$mntNewBoot"
    exit 3
  fi

  # mount and copy /boot
  mount | grep -qw /boot || mount /boot
  if [ $? -ne 0 ]; then
    msg "error: could not mount /boot, aborting!"
    exit 3
  fi
  copyBoot "/boot/" "$mntNewBoot"   # copy to new boot and ...
  if [ -f "/boot/pi-boot-switch.txt" ]; then
    # ... also copy excluded pi-boot-switch.txt
    cp -a "/boot/pi-boot-switch.txt" "$mntNewBoot"
  fi

  umount "$mntNewBoot" && rm -fr "$mntNewBoot"
  if type -p fatlabel > /dev/null; then
    fatlabel "$bootDevice" "boot"
  else
    msg "warning: could not label $bootDevice - please install fatlabel"
  fi

  # change device for mountpoint /boot in all systems
  fixAllFstab

  msg "info: activate USB-boot to and remove SD-card to boot from $bootDevice"
}

# --- install an image to a partition   --------------------------------------

doInstall() {
  msg "info: installing $srcImage to $targetDevice"

  # load kernel module for loop-mount
  modprobe loop

  # unzip image to temporary storage if necessary
  local imgFile didUnzip
  if [ "${srcImage##*.}" = "zip" ]; then
    msg "info: unzipping $srcImage to $srcImage.img"
    unzip -p "$srcImage" > "$srcImage.img"
    imgFile="$srcImage.img"
    didUnzip=1
  else
    imgFile="$srcImage"
    didUnzip=0
  fi

  # create loop-partitions
  local srcDevice
  srcDevice=`losetup --show -f -P "$imgFile" 2>/dev/null`
  if [ -z "$srcDevice" ]; then
    msg "error: could not setup loop-devices for $imgFile!"
    exit 3
  fi
  msg "info: src device is: $srcDevice"

  # loop-mount partitions of image
  # -> part1: boot
  # -> part2: root
  local mntDirSrc=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
  msg "info: mounting ${srcDevice}p2 on $mntDirSrc"
  if ! mount "${srcDevice}p2" "$mntDirSrc"; then
    msg "error: could not mount ${srcDevice}p2, aborting!"
    losetup -D "$imgFile"
    exit 3
  fi
  msg "info: mounting ${srcDevice}p1 on $mntDirSrc/boot"
  if ! mount "${srcDevice}p1" "$mntDirSrc/boot"; then
    msg "error: could not mount ${srcDevice}p1, aborting!"
    umount "${srcDevice}p2"
    losetup -D "$imgFile"
    exit 3
  fi

  # copy files
  doCopy "$mntDirSrc/"
  msg "info: finished installing $srcImage to $targetDevice"

  # umount and release loop-partitions
  msg "info: cleaning up devices"
  umount "${srcDevice}p1"
  umount "${srcDevice}p2" && rm -fr "$mntDirSrc"
  losetup -D "$imgFile"

  # remove unzipped image
  if [ "$didUnzip" -eq 1 ]; then
    msg "info: removing temporary image"
    rm -f "$srcImage.img"
  fi
}

# --- copy files from another partition to target partition   ----------------

doCopyOther() {
  local mntOther didMount=0

  if [ -z "$srcDir" ]; then
    # mount other partition if necessary
    mntOther=$(mount | grep -w "$otherPartition" | cut -f3 -d" ")
    if [ -z "$mntOther" ]; then
      didMount=1
      mntOther=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
      mount -o ro "$otherPartition" "$mntOther"
    fi
  else
    mntOther="$srcDir"
  fi

  # check if partition is valid
  if [ ! -d "$mntOther/_boot" ]; then
    msg "error: $mntOther is not a valid partition"
    if [ $didMount -eq 1 ]; then
      umount "$otherPartition" && rm -fr "$mntOther"
    fi
    return 3
  fi

  # copy files
  doCopy "$mntOther/"

  # cleanup
  if [ $didMount -eq 1 ]; then
    umount "$otherPartition" && rm -fr "$mntOther"
  fi
  return 0
}

# --- copy files to target partition   ---------------------------------------

doCopy() {
  if [ -z "$targetDevice" ]; then
    msg "error: no target partition selected"
    exit 3
  fi

  local src="$1"

  # add sanity check
  if [ -z "$targetDir" ]; then
    if mount | grep -qw "$targetDevice"; then
      msg "error: $targetDevice is mounted. Cowardly refusing to continue"
      exit 3
    fi
  fi

  # format target partition
  if [ -z "$targetDir" ]; then
    if [ -n "$format" ]; then
      msg "info: formatting partition $targetDevice with $FS_TYPE"
      if [ -n "$verbose" ]; then
        mkfs.$FS_TYPE -F -E "lazy_itable_init=0,lazy_journal_init=0"  "$targetDevice"
      else
        mkfs.$FS_TYPE -q -F -E "lazy_itable_init=0,lazy_journal_init=0"  "$targetDevice"
      fi
    else
      msg "warning: not formatting $targetDevice!"
    fi
  fi

  # query UUID of targetDevice
  if [ $useUUID -eq 1 ]; then
      targetUUID=$(blkid -o export -s UUID "$targetDevice" | grep "UUID")
  fi

  if [ -z "$targetDir" ]; then
    # mount target partition
    local mntDirTarget=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
    msg "info: mounting $targetDevice on $mntDirTarget"
    if ! mount "$targetDevice" "$mntDirTarget"; then
      msg "error: could not mount $targetDevice, aborting!"
      exit 3
    fi
  else
    local mntDirTarget="$targetDir"
  fi

  # copy files
  copyRoot "$src" "$mntDirTarget"

  # fix fstab
  if [ $useUUID -eq 1 ]; then
    updateFstab "$targetUUID" "$mntDirTarget/etc/fstab"
  elif [ -n "$targetDeviceName" ]; then
    updateFstab "$targetDeviceName" "$mntDirTarget/etc/fstab"
  fi

  # mount and copy /boot
  if [ -z "$copyOther" ]; then
    mount | grep -qw "${src}boot" || mount "${src}boot"
    copyBoot "${src}boot/" "$mntDirTarget/_boot"    # copy to new root/_boot
  fi
  
  # fix /_boot/cmdline.txt
  if [ $useUUID -eq 1 ]; then
    updateCmdline "$targetUUID" "$mntDirTarget/_boot/$bootFile"
  elif [ -n "$targetDeviceName" ]; then
    updateCmdline "$targetDeviceName" "$mntDirTarget/_boot/$bootFile"
  fi

  if [ -z "$targetDir" -a -z "$srcDir" ]; then
    # get label if empty
    local srcPart=$(findmnt -no SOURCE `stat --printf "%m" "$src"`)
    if [ -z "$targetLabel" -a -z "$(lsblk -nlo LABEL $targetDevice)" ]; then
      targetLabel=$(lsblk -nlo LABEL "$srcPart")
      if [ -z "$targetLabel" ]; then
        getLabel "$mntDirTarget"
        msg "info: using default label"
      else
        msg "info: using label from partition $srcPart"
      fi
      label=1                      # force labelling
    fi
  fi

  # get description if empty
  if [ -z "$targetDir" -a -z "$srcDir" -a -z "$description" ]; then
    readDescription
    description="${partDescription[$srcPart]}" # forces update of description
    msg "info: using description from partition $srcPart"
  fi

  if [ -z "$targetDir" ]; then
    # umount target partition
    umount "$mntDirTarget" && rm -fr "$mntDirTarget"
  fi

  if [ -z "$install" ]; then
    msg "info: copied system to $targetDevice"
    if [ -z "$targetDir" ]; then
      if [ -z "$switch" -a -z "$switchSelect" ]; then
        msg "info: use ${0##*/} with option '-s -t $targetDevice' to boot from new partition"
      else
        msg "info: reboot the system to start from $targetDevice"
      fi
    fi
  fi
}

# --- switch root-partition   ------------------------------------------------

doSwitch() {
  if [ -z "$targetDevice" ]; then
    msg "error: no target partition selected"
    exit 3
  fi
  local rootDevice="$targetDevice"

  # mount /boot and update /_boot
  mount | grep -qw /boot || mount /boot
  if [ $? -ne 0 ]; then
    msg "error: could not mount /boot, aborting!"
    exit 3
  fi

  # check if new rootDevice is identical to current root-device
  # i.e. we are at most undoing a switch
  local currentRoot=$(getCurrentDevice NAME /)
  if [ "$currentRoot" == "$rootDevice" ]; then
    # we just have to update /boot from /_boot
    copyBoot "/_boot/" "/boot"
    return
  else
    # backup /boot to current root/_boot
    copyBoot "/boot/" "/_boot"
  fi


  # check if new root is currently mounted
  if mount | grep -qw "$rootDevice"; then
    msg "error: target partition currently mounted, aborting!"
    exit 3
  fi

  # mount new-root
  local mntNewRoot=`mktemp -d --tmpdir pi-boot-switch.XXXXXX`
  msg "info: mounting $rootDevice on $mntNewRoot"
  if ! mount "$rootDevice" "$mntNewRoot"; then
    msg "error: could not mount $rootDevice, aborting!"
    exit 3
  fi

  if [ ! -d "$mntNewRoot/_boot/" ]; then
    msg "error: $rootDevice has no /_boot directory, aborting!"
    umount "$mntNewRoot" && rm -fr "$mntNewRoot"
    exit 3
  fi

  # copy /new/_boot -> /boot
  copyBoot "$mntNewRoot/_boot/" "/boot"

  # update /home if requested
  if [ "$updateHome" = "1" ]; then
    msg "info: updating /home on $targetDevice"
    rsync $verbose -a -H -A -X -S -x /home "$mntNewRoot"
  fi

  # umount /new
  msg "info: unmounting $rootDevice"
  umount "$mntNewRoot" && rm -fr "$mntNewRoot"

  msg "info: reboot the system to start from $rootDevice"
}

# --- reboot the system   ----------------------------------------------------

doReboot() {
  msg "info: rebooting the system in $REBOOT_DELAY seconds"
  sleep "$REBOOT_DELAY"
  shutdown -r now &
}

# --- main program   ---------------------------------------------------------

setDefaults
parseArguments "$@"
checkArguments

# execute operation(s)

if [ -n "$info" ]; then
  doInfo
else
  # preserve order of execution (start with copy)
  if [ -n "$copy" ]; then
    doCopy "/" ||  exit 3
  elif [ -n "$copyOther" ]; then
    doCopyOther || exit 3
  elif [ -n "$install" ]; then
    doInstall || exit 3
  fi
  [ -n "$switch" ]      && doSwitch
  [ ! -z "$newBoot" ]     && doNewBoot
  [ -n "$label" ]       && doLabel
  [ -n "$description" ] && doDescription
  [ -n "$reboot" ]      && doReboot
fi
